
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftDOTleftMINUSPLUSCOMMA DOT DOTS ID INTEGER InstImm LBREACKET MINUS NEWLINE OPCODE PLUS RBREACKET REG STRINGcode : code instruction\n                | code pointer\n                | code NEWLINE\n                | pointer\n                | instruction\n                | NEWLINEpointer : DOT ID NEWLINEexpression : IDexpression : INTEGERexpression : MINUS INTEGERexpression : expression PLUS expression\n                      | expression MINUS expressioninstruction : OPCODE operands NEWLINE\n                       | OPCODE NEWLINEinstruction : InstImm expression NEWLINEoperand : REG\n                   | STRING\n                   | expression\n                   | LBREACKET REG RBREACKET\n                   | LBREACKET REG DOTS expression RBREACKET\n                   | LBREACKET expression DOTS REG RBREACKEToperands   : operands COMMA operand\n                      | operand'
    
_lr_action_items = {'NEWLINE':([0,1,2,3,4,6,8,9,10,11,12,13,14,15,16,17,19,20,22,23,24,30,31,32,33,34,35,40,41,],[4,10,-5,-4,-6,13,-1,-2,-3,23,24,-14,-23,-16,-17,-18,-8,-9,31,-7,-13,-10,-15,-22,-11,-12,-19,-20,-21,]),'DOT':([0,1,2,3,4,8,9,10,13,23,24,31,],[5,5,-5,-4,-6,-1,-2,-3,-14,-7,-13,-15,]),'OPCODE':([0,1,2,3,4,8,9,10,13,23,24,31,],[6,6,-5,-4,-6,-1,-2,-3,-14,-7,-13,-15,]),'InstImm':([0,1,2,3,4,8,9,10,13,23,24,31,],[7,7,-5,-4,-6,-1,-2,-3,-14,-7,-13,-15,]),'$end':([1,2,3,4,8,9,10,13,23,24,31,],[0,-5,-4,-6,-1,-2,-3,-14,-7,-13,-15,]),'ID':([5,6,7,18,25,26,27,36,],[11,19,19,19,19,19,19,19,]),'REG':([6,18,25,37,],[15,28,15,39,]),'STRING':([6,25,],[16,16,]),'LBREACKET':([6,25,],[18,18,]),'INTEGER':([6,7,18,21,25,26,27,36,],[20,20,20,30,20,20,20,20,]),'MINUS':([6,7,17,18,19,20,22,25,26,27,29,30,33,34,36,38,],[21,21,27,21,-8,-9,27,21,21,21,27,-10,-11,-12,21,27,]),'COMMA':([12,14,15,16,17,19,20,30,32,33,34,35,40,41,],[25,-23,-16,-17,-18,-8,-9,-10,-22,-11,-12,-19,-20,-21,]),'PLUS':([17,19,20,22,29,30,33,34,38,],[26,-8,-9,26,26,-10,-11,-12,26,]),'DOTS':([19,20,28,29,30,33,34,],[-8,-9,36,37,-10,-11,-12,]),'RBREACKET':([19,20,28,30,33,34,38,39,],[-8,-9,35,-10,-11,-12,40,41,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'code':([0,],[1,]),'instruction':([0,1,],[2,8,]),'pointer':([0,1,],[3,9,]),'operands':([6,],[12,]),'operand':([6,25,],[14,32,]),'expression':([6,7,18,25,26,27,36,],[17,22,29,17,33,34,38,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> code","S'",1,None,None,None),
  ('code -> code instruction','code',2,'p_code','parser.py',53),
  ('code -> code pointer','code',2,'p_code','parser.py',54),
  ('code -> code NEWLINE','code',2,'p_code','parser.py',55),
  ('code -> pointer','code',1,'p_code','parser.py',56),
  ('code -> instruction','code',1,'p_code','parser.py',57),
  ('code -> NEWLINE','code',1,'p_code','parser.py',58),
  ('pointer -> DOT ID NEWLINE','pointer',3,'p_pointer','parser.py',74),
  ('expression -> ID','expression',1,'p_expression_id','parser.py',79),
  ('expression -> INTEGER','expression',1,'p_expression_int','parser.py',84),
  ('expression -> MINUS INTEGER','expression',2,'p_expression_unary','parser.py',89),
  ('expression -> expression PLUS expression','expression',3,'p_expression_bin','parser.py',97),
  ('expression -> expression MINUS expression','expression',3,'p_expression_bin','parser.py',98),
  ('instruction -> OPCODE operands NEWLINE','instruction',3,'p_instruction','parser.py',108),
  ('instruction -> OPCODE NEWLINE','instruction',2,'p_instruction','parser.py',109),
  ('instruction -> InstImm expression NEWLINE','instruction',3,'p_instruction_imm','parser.py',119),
  ('operand -> REG','operand',1,'p_operand','parser.py',124),
  ('operand -> STRING','operand',1,'p_operand','parser.py',125),
  ('operand -> expression','operand',1,'p_operand','parser.py',126),
  ('operand -> LBREACKET REG RBREACKET','operand',3,'p_operand','parser.py',127),
  ('operand -> LBREACKET REG DOTS expression RBREACKET','operand',5,'p_operand','parser.py',128),
  ('operand -> LBREACKET expression DOTS REG RBREACKET','operand',5,'p_operand','parser.py',129),
  ('operands -> operands COMMA operand','operands',3,'p_operands','parser.py',152),
  ('operands -> operand','operands',1,'p_operands','parser.py',153),
]
